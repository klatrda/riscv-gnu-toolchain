; Options for the MIPS port of the compiler
;
; PULP family support contributed by Eric Flamand (eflamand@iis.ee.ethz.ch) at ETH-Zurich
;
; Copyright (C) 2005, 2007, 2008, 2010, 2011 Free Software Foundation, Inc.
;
; This file is part of GCC.
;
; GCC is free software; you can redistribute it and/or modify it under
; the terms of the GNU General Public License as published by the Free
; Software Foundation; either version 3, or (at your option) any later
; version.
;
; GCC is distributed in the hope that it will be useful, but WITHOUT
; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
; License for more details.
;
; You should have received a copy of the GNU General Public License
; along with GCC; see the file COPYING3.  If not see
; <http://www.gnu.org/licenses/>.


HeaderInclude
config/riscv/riscv-opts.h


Enum
Name(Pulp_Chip_Config_Type) Type(enum Pulp_Chip_Config_Type)

EnumValue
Enum(Pulp_Chip_Config_Type) String(cluster) Value(PULP_CHIP_CONFIG_CLUSTER)

EnumValue
Enum(Pulp_Chip_Config_Type) String(fc) Value(PULP_CHIP_CONFIG_FC)

EnumValue
Enum(Pulp_Chip_Config_Type) String(all) Value(PULP_CHIP_CONFIG_ALL)

mconf=
Target RejectNegative Joined Var(Pulp_Chip_Config) Enum(Pulp_Chip_Config_Type) Init(PULP_CHIP_CONFIG_ALL)
-mconf=CONF, Conf= all, fc, cluster, default is all.	

Enum
Name(Pulp_Chip_Type) Type(enum Pulp_Chip_Type)

EnumValue
Enum(Pulp_Chip_Type) String(honey) Value(PULP_CHIP_HONEY)

EnumValue
Enum(Pulp_Chip_Type) String(pulpino) Value(PULP_CHIP_PULPINO)


mchip=
Target RejectNegative Joined Var(Pulp_Chip) Enum(Pulp_Chip_Type) Init(PULP_CHIP_NONE)
-mchip=CHIP	Compile code for pulp chip CHIP


Enum
Name(Pulp_Processor_Type) Type(enum Pulp_Processor_Type)

EnumValue
Enum(Pulp_Processor_Type) String(pulpv0) Value(PULP_V0)

EnumValue
Enum(Pulp_Processor_Type) String(pulpv1) Value(PULP_V1)

EnumValue
Enum(Pulp_Processor_Type) String(pulpv2) Value(PULP_V2)


EnumValue
Enum(Pulp_Processor_Type) String(pulpv3) Value(PULP_V3)

mcpu=
Target RejectNegative Joined Var(Pulp_Cpu) Enum(Pulp_Processor_Type) Init(PULP_NONE)
-mcpu=CPU       Compile code for Pulp variant CPU, default is none.

mPE=
Target RejectNegative Joined UInteger Var(_Pulp_PE) Init(0)
-mPE=N		Set PE cluster PE count to N.

mFC=
Target RejectNegative Joined UInteger Var(_Pulp_FC) Init(0)
-mFC=		0: without FC, 1: with FC.

mL2=
Target RejectNegative Joined UInteger Var(_Pulp_L2_Size) Init(0)
-mL2=SIZE	Set L2 size to SIZE, Init to 0.

mL1Cl=
Target RejectNegative Joined UInteger Var(_Pulp_L1_Cluster_Size) Init(0)
-mL1Cl=SIZE	Set Cluster L1 size to SIZE, Init to 0.

mL1Fc=
Target RejectNegative Joined UInteger Var(_Pulp_L1_FC_Size) Init(0)
-mL1c=SIZE	Set Fabric Controller L1 size to SIZE, Init to 0.

m32
Target RejectNegative Mask(32BIT)
Generate RV32 code

m64
Target RejectNegative InverseMask(32BIT, 64BIT)
Generate RV64 code

mbranch-cost=
Target RejectNegative Joined UInteger Var(riscv_branch_cost)
-mbranch-cost=COST	Set the cost of branches to roughly COST instructions

mhard-float
Target Report RejectNegative InverseMask(SOFT_FLOAT_ABI, HARD_FLOAT_ABI)
Allow the use of hardware floating-point ABI and instructions

mmemcpy
Target Report Mask(MEMCPY)
Don't optimize block moves

mplt
Target Report Var(TARGET_PLT) Init(1)
When generating -fpic code, allow the use of PLTs. Ignored for fno-pic.

msoft-float
Target Report RejectNegative Mask(SOFT_FLOAT_ABI)
Prevent the use of all hardware floating-point instructions

mno-fdiv
Target Report RejectNegative Mask(NO_FDIV)
Don't use hardware floating-point divide and square root instructions

mfdiv
Target Report RejectNegative InverseMask(NO_FDIV, FDIV)
Use hardware floating-point divide and square root instructions

march=
Target RejectNegative Joined Var(riscv_arch_string)
-march=			Generate code for given RISC-V ISA (e.g. RV64IM)

mtune=
Target RejectNegative Joined Var(riscv_tune_string)
-mtune=PROCESSOR	Optimize the output for PROCESSOR

msmall-data-limit=
Target Joined Separate UInteger Var(g_switch_value) Init(8)
-msmall-data-limit=<number>	Put global and static data smaller than <number> bytes into a special section (on some targets)

matomic
Target Report Mask(ATOMIC)
Use hardware atomic memory instructions.

mmuldiv
Target Report Mask(MULDIV)
Use hardware instructions for integer multiplication and division.

mrvc
Target Report Mask(RVC)
Use compressed instruction encoding

msave-restore
Target Report Mask(SAVE_RESTORE)
Use smaller but slower prologue and epilogue code

mlra
Target Report Var(riscv_lra_flag) Init(0) Save
Use LRA instead of reload

mcmodel=
Target RejectNegative Joined Var(riscv_cmodel_string)
Use given RISC-V code model (medlow or medany)

mrvstd
Target Mask(MASK_RVSTD)
Filter out div support when M isa is used

mnohwdiv
Target Mask(MASK_NOHWDIV)
Disable 32 bits Hardware Division

mnohwloop
Target Mask(MASK_NOHWLOOP)
Disable hardware loop support

mnofinduct
Target Mask(MASK_NOFINDUCT)
Disable cost function setting to favor induction scheme

msloop
Target Mask(MASK_SLOOP)
Use long hw loop setup instead of padding with nop for loop with insn count < 3

mnopostmod
Target Mask(MASK_NOPOSTMOD)
Disable pointer post modification support

mnoindregreg
Target Mask(MASK_NOINDREGREG)
Disable register offset pointer load/store

mnomac
Target Mask(MASK_NOMAC)
Disable full 32x32 into 32 mac support

mnopartmac
Target Mask(MASK_NOPARTMAC)
Disable 16x16 into 32 mac support

mnominmax
Target Mask(MASK_NOMINMAX)
Disable min/max support

mnoabs
Target Mask(MASK_NOABS)
Disable abs support

mnobitop
Target Mask(MASK_NOBITOP)
Disable cnt/ff1/fl1 support

mnosext
Target Mask(MASK_NOSEXT)
Disable reg to reg sign-extending instructions

mnoslet
Target Mask(MASK_NOSLET)
Disable slet/sletu instructions

mnoball
Target Mask(MASK_NOBALL)
Disable ball instruction

mnovect
Target Mask(MASK_NOVECT)
Disable simd support

mnoclip
Target Mask(MASK_NOCLIP)
Disable clip/clipu. -nominmax also disable clip/clipu

mnoaddsubnormround
Target Mask(MASK_NOADDSUBNORMROUND)
Disable add/sub with norm and round

mnomulmacnormround
Target Mask(MASK_NOMULMACNORMROUND)
Disable 16x16 into 32 mul/mac  with norm and round

mnewinsn
Target Mask(MASK_NEW_INSN)
Enable new bit unit and add/subNR instructions

mnoshufflepack
Target Mask(MASK_NOSHUFFLEPACK)
Disable vector pack and shuffle support

mnativeomp
Target Mask(MASK_OPEN_NATIVE)
Enable Native Mapping of OpenMP runtime

mWci
Target Var(WARN_CINFO)
Emit warnings when conflicting .Chip_Info.Info sections are found at link time without aborting link.

mEci
Target Var(ERR_CINFO)
Emit warnings when conflicting .Chip_Info.Info sections are found at link time and abort link.

mComp
Target Var(LINK_COMP)
Link in component mode

mDIE
Target Var(LINK_DUMP_IE_SECT)
Dump content of import and export sections

